#version 450
layout(local_size_x = 64) in;

// input: stereo interleaved (R0, L0, R1, L1, ...)
layout(binding = 0) readonly buffer InputBuffer {
    float inSamples[];
};

// output: same interleaved format
layout(binding = 1) writeonly buffer OutputBuffer {
    float outSamples[];
};

// Push Constants: specified in frames (not samples)
layout(push_constant) uniform PushConstants {
    uint inFrameCount;   // Number of input frames
    uint outFrameCount;  // Number of output frames
    float ratio;         // Resample ratio (output / input)
} pc;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= pc.outFrameCount * 2) return;

    uint channel = 1 - (gid & 1); // 0 = R, 1 = L
    uint outFrameIndex = gid >> 1;

    float inFrameIndex = float(outFrameIndex) / pc.ratio;
    uint baseFrame = uint(inFrameIndex);
    float frac = inFrameIndex - float(baseFrame);

    // If we're out of bounds, clamp to last valid sample
    if (baseFrame + 1 >= pc.inFrameCount) {
        uint baseIndex = baseFrame * 2 + channel;
        float s0 = (baseIndex < pc.inFrameCount * 2) ? inSamples[baseIndex] : 0.0;
        outSamples[gid] = max(-1.0, min(1.0, s0));
        return;
    }

    uint baseIndex = baseFrame * 2 + channel;
    uint nextIndex = baseIndex + 2;

    float s0 = inSamples[baseIndex];
    float s1 = (nextIndex < pc.inFrameCount * 2) ? inSamples[nextIndex] : s0;

    // Linear interpolation with clamp for safety
    float mixed = fma(frac, s1 - s0, s0);
    outSamples[gid] = max(-1.0, min(1.0, mixed));
}
